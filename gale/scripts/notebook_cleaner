#!/usr/bin/env python
'''
File: notebook_cleaner
Author: Adam Pah
Description: 
Cleans the output of a notebook file and extracts all code cells that start with #[Aa]nswer
'''

#Standard path imports
from __future__ import division, print_function
import argparse
import glob
import json
import os

#Non-standard imports

#Global directories and variables


def write_answer_file(answers, fpath, answerdir):
    '''
    Writes out the answer .py file
    input:
        answers - list of answer
        fpath - fpath name of current file
    '''
    #Get the filename
    fname, fext = os.path.splitext(os.path.basename(fpath))
    #write out the code
    if os.path.exists(answerdir + fname + '.py'):
        wfile = open(answerdir + fname + '.py', 'a') 
    else:
        wfile = open(answerdir + fname + '.py', 'w') 
    for answer_set in answers:
        print(''.join(answer_set), file = wfile)
        print('\n\n#######\n\n', file = wfile)
    wfile.close()

def clean_file(fpath, answerdir):
    '''
    Cleans an individual file, saving it to its original location.
    Saves the answers to a new .py file for ease of finding/opening without notebook
    input:
        fpath - filepath
    output:
        None
    '''
    #Answer keys
    answers, answer_indices = [], []
    #Load the notebook
    notebook = json.loads( open(fpath).read() )
    #Iterate through each cell
    for i, cell in enumerate(notebook['cells']):
        #Check for the answer
        if cell['source'] != []:
            if '#Answer\n' == cell['source'][0] or '#answer\n' == cell['source'][0]:
                #Append the index for deletion after
                answer_indices.append(i)
                #Add the answer to answers
                answers.append( cell['source'] )
        #Kill the output
        if 'output' in notebook['cells'][i]:
            notebook['cells'][i]['output'] = []
    #Delete the answer cells, reverse so that the indices are not disrupted
    for ai in reversed(answer_indices):
        del notebook['cells'][ai]
    #Write out the answer .py
    if answers != []:
        write_answer_file(answers, fpath, answerdir)
    #Save the cleaned notebook back down
    with open(fpath, 'w') as jfile:
        jstr = json.dumps( notebook )
        print(jstr, file=jfile)


def main(args):
    '''
    Main function to handle file loading/traversal
    '''
    if args.directory == True:
        for fpath in glob.glob(args.input_path + '/*'):
            clean_file(fpath, args.answerdir)
    else:
        clean_file(args.input_path, args.answerdir)
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="")
    parser.add_argument('input_path', help = "Input file (or path with --directory flag) to be cleaned")
    parser.add_argument('--directory', action = 'store_true', default=False, help="Clean all notebook files in a directory")
    parser.add_argument('--answerdir', action = 'store', default = '../', help ="Directory to store answer notebooks")
    args = parser.parse_args()
    main(args)

